<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.framework.modules.ucenter.qq.dao.QqSettingDao">
    
	<sql id="qqSettingColumns">
		a.id AS "id",
		a.name AS "name",
		a.android_appid AS "androidAppid",
		a.android_secret AS "androidSecret",
		a.ios_appid AS "iosAppid",
		a.ios_secret AS "iosSecret",
		a.get_token_url AS "getTokenUrl",
		a.get_info_url AS "getInfoUrl",
		a.create_date AS "createDate",
		a.create_by AS "createBy.id",
		a.update_date AS "updateDate",
		a.update_by AS "updateBy.id"
	</sql>
	
	<sql id="qqSettingJoins">
	</sql>
	
    
	<select id="get" resultType="QqSetting" >
		SELECT 
			<include refid="qqSettingColumns"/>
		FROM qq_setting a
		<include refid="qqSettingJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="QqSetting" >
		SELECT 
			<include refid="qqSettingColumns"/>
		FROM qq_setting a
		<include refid="qqSettingJoins"/>
		<where>
			
			<if test="name != null and name != ''">
				AND a.name LIKE concat('%',#{name},'%')
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="QqSetting" >
		SELECT 
			<include refid="qqSettingColumns"/>
		FROM qq_setting a
		<include refid="qqSettingJoins"/>
		<where>
			
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO qq_setting(
			id,
			name,
			android_appid,
			android_secret,
			ios_appid,
			ios_secret,
			get_token_url,
			get_info_url,
			create_date,
			create_by,
			update_date,
			update_by
		) VALUES (
			#{id},
			#{name},
			#{androidAppid},
			#{androidSecret},
			#{iosAppid},
			#{iosSecret},
			#{getTokenUrl},
			#{getInfoUrl},
			#{createDate},
			#{createBy.id},
			#{updateDate},
			#{updateBy.id}
		)
	</insert>
	
	<update id="update">
		UPDATE qq_setting SET 	
			name = #{name},
			android_appid = #{androidAppid},
			android_secret = #{androidSecret},
			ios_appid = #{iosAppid},
			ios_secret = #{iosSecret},
			get_token_url = #{getTokenUrl},
			get_info_url = #{getInfoUrl},
			update_date = #{updateDate},
			update_by = #{updateBy.id}
		WHERE id = #{id}
	</update>
	
	
	<!--物理删除-->
	<update id="delete">
		DELETE FROM qq_setting
		WHERE id = #{id}
	</update>
	
	<!--逻辑删除-->
	<update id="deleteByLogic">
		UPDATE qq_setting SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
	
	<!-- 根据实体名称和字段名称和字段值获取唯一记录 -->
	<select id="findUniqueByProperty" resultType="QqSetting" statementType="STATEMENT">
		select * FROM qq_setting  where ${propertyName} = '${value}'
	</select>
	
</mapper>